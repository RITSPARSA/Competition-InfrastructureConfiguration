---
- include: misc.yml

- name: Get ansible distribution
  set_fact:
    ansible_distro: "{{ ansible_distribution|lower|replace('\"', '') }}"

- name: gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
      - "{{ ansible_distro }}-{{
            ansible_distribution_version|lower|replace('/', '_') }}.yml"
      - "{{ ansible_distro }}-{{ ansible_distribution_release }}.yml"
      - "{{ ansible_distro }}-{{
            ansible_distribution_major_version|lower|replace('/', '_') }}.yml"
      - "{{ ansible_distro }}.yml"
      - "{{ ansible_os_family|lower }}.yml"
      paths:
      - ../vars
      skip: true

- name: Install Samba
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ samba_packages }}"

- name: Configure Samba as a domain member
  template: src=smb.conf.j2 dest=/etc/samba/smb.conf
            owner=root group=root mode=0644
  notify: restart samba

- name: Ensure Samba is started and enabled on boot
  service: name=smb state=started enabled=yes

- name: Join AD with Samba to generate the keytab
  command: /usr/bin/net ads join createcomputer={{ adauth_server_ou }} -U "{{ adauth_username }}"%"{{ adauth_password }}"
  args:
    creates: /etc/krb5.keytab

- name: Install Kerberos and LDAP clients
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ kerb_packages }}"

- name: Configure Kerberos integration with AD
  template: src=krb5.conf dest=/etc/krb5.conf
            owner=root group=root mode=0644

- name: Get kerberos ticket with the sambe keytab
  command: kinit -k -t /etc/krb5.keytab {{ ansible_hostname | upper }}$\@{{ adauth_realm }}
  args:
    creates: /tmp/krb5cc_0

- name: Install SSSD and related
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ sssd_packages }}"

- name: Check if authconfig did a previous run
  command: "/bin/egrep '^auth.*sufficient.*pam_sss.so' /etc/pam.d/system-auth"
  register: authconfig_run
  changed_when: false
  ignore_errors: true

- name: Configure server to use SSSD for authentication
  # TODO: https://fedorahosted.org/sssd/wiki/Configuring_sssd_with_ad_server#ConfigureNSSPAMmanually
  command: /usr/sbin/authconfig --enablesssd --enablesssdauth --enablemkhomedir --updateall --nostart
  #when: authconfig_run.stdout.find("pam_sss.so") == -1
  when: authconfig_run.rc != 0

- name: Configure SSSD to use AD for authentication
  template: src=sssd.conf.j2 dest=/etc/sssd/sssd.conf
            owner=root group=root mode=0600
  notify: restart sssd

- name: Ensure SSSD is started and enabled on boot
  service: name=sssd state=started enabled=yes

- name: Ensure oddjobd for mkhomedir is started and enabled on boot
  service: name=oddjobd state=started enabled=yes

- include: "{{ item }}"
  with_first_found:
    - files:
      - "{{ ansible_distro }}-{{
            ansible_distribution_version|lower|replace('/', '_') }}.yml"
      - "{{ ansible_distro }}-{{ ansible_distribution_release }}.yml"
      - "{{ ansible_distro }}-{{
            ansible_distribution_major_version|lower|replace('/', '_') }}.yml"
      - "{{ ansible_distro }}.yml"
      - "{{ ansible_os_family|lower }}.yml"
      skip: true
